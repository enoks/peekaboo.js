/**
 * peekaboo v1.2.2
 * https://github.com/enoks/peekaboo.js
 *
 * Copyright 2021, Stefan KÃ¤sche
 * https://github.com/enoks
 *
 * Licensed under MIT
 * https://github.com/enoks/peekaboo.js/blob/master/LICENSE
 */
!function(e,t){"use strict";
// AMD module
"function"==typeof define&&define.amd?define("peekaboo",[],function(){return t}):"object"==typeof module&&"object"==typeof module.exports?module.exports=t:e.peekaboo=t}(window,function(){"use strict";var i=[],// array of all peekaboo() calls
e=!1;// be patient
// check jobs
function s(t){
// no jobs ... nothing to do
if(i.length){if(e){if(!window.requestAnimationFrame)return;
// collect window's top, bottom, left and right
}else{
// using window's requestAnimationFrame for throttle/debounce
if(window.requestAnimationFrame)return e=window.requestAnimationFrame(s.bind(s,t));e=!0}var l=window.pageYOffset,r=l+Math.max(document.documentElement.clientHeight,window.innerHeight||0),c=window.pageXOffset,d=c+Math.max(document.documentElement.clientWidth,window.innerWidth||0);
// loop through jobs
i.forEach(function(a,e){
// specific job is requested (on init of job)
"number"==typeof t&&t!==e||(
// loop through job elements
a.$.forEach(function(e,t){if(!e)return a.$[t]=null;
// collect element's top, bottom, left and right
var o=e.getBoundingClientRect().top+window.pageYOffset-document.documentElement.clientTop,n=o+e.clientHeight,i=e.getBoundingClientRect().left+window.pageXOffset-document.documentElement.clientLeft,s=i+e.clientWidth;
// make sure threshold results in a _possible space_
l-a.options.threshold>r+a.options.threshold&&(a.options.threshold+=(l-a.options.threshold-(r+a.options.threshold))/2),
// check if element is in viewport
// ... or should be loaded anyway
(!0===a.options.loadInvisible||("vertical"==a.options.loadInvisible||n>=l-a.options.threshold&&o<=r+a.options.threshold)&&("horizontal"==a.options.loadInvisible||s>=c-a.options.threshold&&i<=d+a.options.threshold))&&(a.options.class&&e.className.split(/ +/).indexOf(a.options.class.trim())<0&&(e.className=(e.className+=" "+a.options.class.trim()).trim()),a.options.callback.call(e,a.options),
// don't need element anymore
a.$[t]=null)}),
// note: splice inside the forEach loop interferes with the array key :/ ... so:
// remove peekaboo'ed elements
a.$=a.$.filter(function(e){return e}))}),
// remove completed jobs
i=i.filter(function(e){return e.$.length}),
// release the function again
"boolean"==typeof e?setTimeout(function(){e=!1},16):e=!1}}var t=!1;
// determines if event listeners support options instead of only boolean (useCapture)
// @link https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){t=!0}}))}catch(e){}
// listen carefully my friend
/**
     * @param string|NodeList|HTMLCollection|HTML...Element $elements
     * @param object|function oSettings
     */
return window.addEventListener("load",s,!!t&&{once:!0,passive:!0}),window.addEventListener("scroll",s,!!t&&{passive:!0}),window.addEventListener("resize",s,!!t&&{passive:!0}),function(e,t){if(e&&("string"==typeof e?e=document.querySelectorAll(e):e instanceof HTMLElement&&(e=[e]),e.length)){
// make sure to have an array
e=Array.prototype.slice.call(e),
// callback shortcut
"function"==typeof t&&(t={callback:t});
// default options
var o={threshold:0,loadInvisible:!1,class:"peekaboo",callback:function(e){}};
// merge options aka settings
if("[object Object]"===Object.prototype.toString.call(t))for(var n in t)if(t.hasOwnProperty(n)){if("loadInvisible"==n)switch((t[n]+"").toLowerCase()){case"true":case"1":t[n]=!0;break;case"horizontal":case"x":t[n]="horizontal";break;case"vertical":case"y":t[n]="vertical";break;default:continue}else switch(typeof o[n]){case"undefined":
// custom option ... just pass through
break;default:
// compare types
if(typeof o[n]==typeof t[n])break;console.debug("Passed value for option '"+n+"' (type of "+typeof t[n]+") doesn't match expected value type ("+typeof o[n]+").");continue;case"number":if(t[n]=parseFloat(t[n]),isNaN(t[n])){console.debug("Passed value for option '"+n+"' isn't of type number at all.");continue}}
// override/extend oOptions
o[n]=t[n]}
// add call to array of jobs
i.push({$:e,options:o}),
// initial call
s(i.length-1)}}}());